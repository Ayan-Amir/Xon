import { EditorState, Plugin, PluginKey } from "prosemirror-state";
import { EditorView } from "prosemirror-view";
import { BaseUiElementCallbacks, BaseUiElementState, BlockNoteEditor, BlockSchema, BlockSpec, SpecificBlock } from "../..";
import { EventEmitter } from "../../shared/EventEmitter";
export type ImageToolbarCallbacks = BaseUiElementCallbacks;
export type ImageToolbarState = BaseUiElementState & {
    block: SpecificBlock<BlockSchema & {
        image: BlockSpec<"image", {
            src: {
                default: string;
            };
        }, false>;
    }, "image">;
};
export declare class ImageToolbarView {
    private readonly pluginKey;
    private readonly pmView;
    private imageToolbarState?;
    updateImageToolbar: () => void;
    prevWasEditable: boolean | null;
    shouldShow: (state: EditorState) => boolean;
    constructor(pluginKey: PluginKey, pmView: EditorView, updateImageToolbar: (imageToolbarState: ImageToolbarState) => void);
    mouseDownHandler: () => void;
    dragstartHandler: () => void;
    blurHandler: (event: FocusEvent) => void;
    scrollHandler: () => void;
    update(view: EditorView, prevState: EditorState): void;
    destroy(): void;
}
export declare const imageToolbarPluginKey: PluginKey<any>;
export declare class ImageToolbarProsemirrorPlugin<BSchema extends BlockSchema> extends EventEmitter<any> {
    private view;
    readonly plugin: Plugin;
    constructor(_editor: BlockNoteEditor<BSchema>);
    onUpdate(callback: (state: ImageToolbarState) => void): () => void;
}
