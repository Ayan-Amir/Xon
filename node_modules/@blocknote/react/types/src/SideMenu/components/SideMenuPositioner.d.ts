import { Block, BlockNoteEditor, BlockSchema, DefaultBlockSchema, SideMenuProsemirrorPlugin } from "@blocknote/core";
import { FC } from "react";
import { DragHandleMenuProps } from "./DragHandleMenu/DragHandleMenu";
export type SideMenuProps<BSchema extends BlockSchema = DefaultBlockSchema> = Pick<SideMenuProsemirrorPlugin<BSchema>, "blockDragStart" | "blockDragEnd" | "addBlock" | "freezeMenu" | "unfreezeMenu"> & {
    block: Block<BSchema>;
    editor: BlockNoteEditor<BSchema>;
    dragHandleMenu?: FC<DragHandleMenuProps<BSchema>>;
};
export declare const SideMenuPositioner: <BSchema extends Record<string, import("@blocknote/core").BlockSpec<string, import("@blocknote/core").PropSchema, boolean>> = {
    readonly paragraph: {
        node: import("@blocknote/core").TipTapNode<"paragraph", true, {
            domAttributes?: Partial<{
                blockContainer: Record<string, string>;
                blockGroup: Record<string, string>;
                editor: Record<string, string>;
                blockContent: Record<string, string>;
                inlineContent: Record<string, string>;
            }> | undefined;
        }, any>;
        propSchema: {
            backgroundColor: {
                default: "default";
            };
            textColor: {
                default: "default";
            };
            textAlignment: {
                default: "left";
                values: readonly ["left", "center", "right", "justify"];
            };
        };
    };
    readonly heading: {
        node: import("@blocknote/core").TipTapNode<"heading", true, {
            domAttributes?: Partial<{
                blockContainer: Record<string, string>;
                blockGroup: Record<string, string>;
                editor: Record<string, string>;
                blockContent: Record<string, string>;
                inlineContent: Record<string, string>;
            }> | undefined;
        }, any>;
        propSchema: {
            level: {
                default: number;
                values: readonly [1, 2, 3];
            };
            backgroundColor: {
                default: "default";
            };
            textColor: {
                default: "default";
            };
            textAlignment: {
                default: "left";
                values: readonly ["left", "center", "right", "justify"];
            };
        };
    };
    readonly bulletListItem: {
        node: import("@blocknote/core").TipTapNode<"bulletListItem", true, {
            domAttributes?: Partial<{
                blockContainer: Record<string, string>;
                blockGroup: Record<string, string>;
                editor: Record<string, string>;
                blockContent: Record<string, string>;
                inlineContent: Record<string, string>;
            }> | undefined;
        }, any>;
        propSchema: {
            backgroundColor: {
                default: "default";
            };
            textColor: {
                default: "default";
            };
            textAlignment: {
                default: "left";
                values: readonly ["left", "center", "right", "justify"];
            };
        };
    };
    readonly numberedListItem: {
        node: import("@blocknote/core").TipTapNode<"numberedListItem", true, {
            domAttributes?: Partial<{
                blockContainer: Record<string, string>;
                blockGroup: Record<string, string>;
                editor: Record<string, string>;
                blockContent: Record<string, string>;
                inlineContent: Record<string, string>;
            }> | undefined;
        }, any>;
        propSchema: {
            backgroundColor: {
                default: "default";
            };
            textColor: {
                default: "default";
            };
            textAlignment: {
                default: "left";
                values: readonly ["left", "center", "right", "justify"];
            };
        };
    };
    readonly image: import("@blocknote/core").BlockSpec<"image", {
        textAlignment: {
            default: "left";
            values: readonly ["left", "center", "right", "justify"];
        };
        backgroundColor: {
            default: "default";
        };
        url: {
            default: "";
        };
        caption: {
            default: "";
        };
        width: {
            default: 512;
        };
    }, false>;
}>(props: {
    editor: BlockNoteEditor<BSchema>;
    sideMenu?: FC<SideMenuProps<BSchema>> | undefined;
}) => import("react/jsx-runtime").JSX.Element;
