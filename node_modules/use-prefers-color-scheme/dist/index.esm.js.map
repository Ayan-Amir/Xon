{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as React from 'react'\n\n/**\n * React hook for determining the preferred color scheme (aka 'prefers-color-scheme').\n * When server side rendered returns `no-preference`.\n *\n * @see [Usage] https://github.com/rfoel/use-prefers-color-scheme#usage\n * @returns {string} String, one of `dark`, `light`, `no-preference`\n */\nexport const usePrefersColorScheme = () => {\n  const [preferredColorSchema, setPreferredColorSchema] = React.useState<\n    'dark' | 'light' | 'no-preference'\n  >(() => {\n    // if window is undefined (SSR), return 'no-preference'\n    if (typeof window === 'undefined') return 'no-preference'\n\n    // since window.matchMedia is synchronous we can initialize the state with the right value\n    // preventing a flash of wrong theme on first render\n    const isDark = window.matchMedia('(prefers-color-scheme: dark)')\n    const isLight = window.matchMedia('(prefers-color-scheme: light)')\n\n    return isDark.matches ? 'dark' : isLight.matches ? 'light' : 'no-preference'\n  })\n\n  // On first render:\n  //   - Ensure window.matchMedia is supported\n  //   - Initialize MediaQueryList objects\n  //   - Check initial state\n  //   - Subscribe on changes\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function') return\n\n    // 1. define MediaQueryList observables\n    const isDark = window.matchMedia('(prefers-color-scheme: dark)')\n    const isLight = window.matchMedia('(prefers-color-scheme: light)')\n\n    // 2. subscribe on changes\n    //\n    // Is modern \"matchMedia\" implementation ???\n    if (typeof isLight.addEventListener === 'function') {\n      // In modern browsers MediaQueryList should subclass EventTarget\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\n      const darkListener = ({ matches }: MediaQueryListEvent) => {\n        matches && setPreferredColorSchema('dark')\n      }\n      const lightListener = ({ matches }: MediaQueryListEvent) => {\n        matches && setPreferredColorSchema('light')\n      }\n      isDark.addEventListener('change', darkListener)\n      isLight.addEventListener('change', lightListener)\n      return () => {\n        isDark.removeEventListener('change', darkListener)\n        isLight.removeEventListener('change', lightListener)\n      }\n    }\n\n    // Is the old \"matchMedia\" implementation ???\n    if (typeof isLight.addListener === 'function') {\n      // In some early implementations MediaQueryList existed, but did not\n      // subclass EventTarget\n      const listener = () =>\n        setPreferredColorSchema(\n          isDark.matches ? 'dark' : isLight.matches ? 'light' : 'no-preference',\n        )\n      // This is two state updates if a user changes from dark to light, but\n      // both state updates will be consistent and should be batched by React,\n      // resulting in only one re-render\n      isDark.addListener(listener)\n      isLight.addListener(listener)\n      return () => {\n        isDark.removeListener(listener)\n        isLight.removeListener(listener)\n      }\n    }\n\n    // Is an unknown implementation case ???\n    return\n  }, [])\n\n  return preferredColorSchema\n}\n\nexport default usePrefersColorScheme\n"],
  "mappings": "AAAA,UAAYA,MAAW,QAShB,IAAMC,EAAwB,IAAM,CACzC,GAAM,CAACC,EAAsBC,CAAuB,EAAU,WAE5D,IAAM,CAEN,GAAI,OAAO,OAAW,IAAa,MAAO,gBAI1C,IAAMC,EAAS,OAAO,WAAW,8BAA8B,EACzDC,EAAU,OAAO,WAAW,+BAA+B,EAEjE,OAAOD,EAAO,QAAU,OAASC,EAAQ,QAAU,QAAU,eAC/D,CAAC,EAOD,OAAM,YAAU,IAAM,CACpB,GAAI,OAAO,OAAO,YAAe,WAAY,OAG7C,IAAMD,EAAS,OAAO,WAAW,8BAA8B,EACzDC,EAAU,OAAO,WAAW,+BAA+B,EAKjE,GAAI,OAAOA,EAAQ,kBAAqB,WAAY,CAGlD,IAAMC,EAAe,CAAC,CAAE,QAAAC,CAAQ,IAA2B,CACzDA,GAAWJ,EAAwB,MAAM,CAC3C,EACMK,EAAgB,CAAC,CAAE,QAAAD,CAAQ,IAA2B,CAC1DA,GAAWJ,EAAwB,OAAO,CAC5C,EACA,OAAAC,EAAO,iBAAiB,SAAUE,CAAY,EAC9CD,EAAQ,iBAAiB,SAAUG,CAAa,EACzC,IAAM,CACXJ,EAAO,oBAAoB,SAAUE,CAAY,EACjDD,EAAQ,oBAAoB,SAAUG,CAAa,CACrD,CACF,CAGA,GAAI,OAAOH,EAAQ,aAAgB,WAAY,CAG7C,IAAMI,EAAW,IACfN,EACEC,EAAO,QAAU,OAASC,EAAQ,QAAU,QAAU,eACxD,EAIF,OAAAD,EAAO,YAAYK,CAAQ,EAC3BJ,EAAQ,YAAYI,CAAQ,EACrB,IAAM,CACXL,EAAO,eAAeK,CAAQ,EAC9BJ,EAAQ,eAAeI,CAAQ,CACjC,CACF,CAIF,EAAG,CAAC,CAAC,EAEEP,CACT,EAEOQ,EAAQT",
  "names": ["React", "usePrefersColorScheme", "preferredColorSchema", "setPreferredColorSchema", "isDark", "isLight", "darkListener", "matches", "lightListener", "listener", "src_default"]
}
